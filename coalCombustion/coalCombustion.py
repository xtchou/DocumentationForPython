import math
import numpy
from scipy.optimize import fsolve
table = [
[100,3.5562,1.032,0.711*10**(-5),9.34*10**(-3),0.786],
[150,2.3364,1.012,1.034*10**(-5),13.8*10**(-3),0.758],
[200,1.7458,1.007,1.325*10**(-5),18.1*10**(-3),0.737],
[250,1.3947,1.006,1.596*10**(-5),22.3*10**(-3),0.720],
[300,1.1614,1.007,1.846*10**(-5),26.3*10**(-3),0.707],
[350,0.9900,1.009,2.082*10**(-5),30.0*10**(-3),0.700],
[400,0.8711,1.014,2.301*10**(-5),33.8*10**(-3),0.690],
[450,0.7740,1.021,2.507*10**(-5),37.3*10**(-3),0.686],
[500,0.6964,1.030,2.701*10**(-5),40.7*10**(-3),0.684],
[550,0.6329,1.040,2.884*10**(-5),43.9*10**(-3),0.683],
[600,0.5804,1.051,3.058*10**(-5),46.9*10**(-3),0.685],
[650,0.5356,1.063,3.225*10**(-5),49.7*10**(-3),0.690],
[700,0.4975,1.075,3.388*10**(-5),52.4*10**(-3),0.695],
[750,0.6463,1.087,3.546*10**(-5),54.9*10**(-3),0.702],
[800,0.4354,1.099,3.698*10**(-5),57.3*10**(-3),0.709],
[850,0.4097,1.110,3.843*10**(-5),59.6*10**(-3),0.716],
[900,0.3868,1.121,3.981*10**(-5),62.0*10**(-3),0.720],
[950,0.3666,1.131,4.113*10**(-5),64.3*10**(-3),0.723],
[1000,0.3482,1.141,4.244*10**(-5),66.7*10**(-3),0.726],
[1100,0.3166,1.159,4.490*10**(-5),71.5*10**(-3),0.728],
[1200,0.2902,1.175,4.730*10**(-5),76.3*10**(-3),0.728],
[1300,0.2679,1.189,4.960*10**(-5),82.0*10**(-3),0.719],
[1400,0.2488,1.207,5.30*10**(-5),91*10**(-3),0.703],
[1500,0.2322,1.230,5.57*10**(-5),100*10**(-3),0.685],
[1600,0.2177,1.248,5.84*10**(-5),106*10**(-3),0.688],
[1700,0.2049,1.267,6.11*10**(-5),113*10**(-3),0.685],
[1800,0.1935,1.286,6.37*10**(-5),120*10**(-3),0.683],
[1900,0.1833,1.307,6.63*10**(-5),128*10**(-3),0.677],
[2000,0.1741,1.337,6.89*10**(-5),137*10**(-3),0.672],
[2100,0.1658,1.372,7.15*10**(-5),147*10**(-3),0.667],
[2200,0.1582,1.417,7.40*10**(-5),160*10**(-3),0.655],
]
# table constructed
def findT(eT,dp,T,v0):
    C02 = 0.2719
    A = 223.6
    EDividesR =18000
    Qf = 3.28*10**7
    em = 1
    delta = 5.67*10**(-8)
    beta = 32.0/12
    formerT =273.0
    TBa = (T+eT)/2.0
    
    while abs(formerT-T)/T>0.02:
        #print (abs(formerT-T)/T)
        formerT = T
        mark = 0
        for i in range(len(table)):
            if TBa<=table[i][0]:
                mark = i-1
                break
        if abs(table[mark][0]-TBa)>=abs(table[mark+1][0]-TBa):
            mark += 1
        rou = table[mark][1]
        Cp = table[mark][2]
        miu = table[mark][3]
        lamta = table[mark][4]
        Pr = table[mark][5]
        Re = rou*v0*dp/miu
        D = 0.18*10**(-4)*TBa/eT
        Sc = miu/(rou*D)
        Sh = 2.0+0.552*(math.pow(Re, 0.5))*Sc**(1.0/3)
        Nu = 2.0+0.6*(math.pow(Re, 1.0/2))*math.pow(Pr, 1.0/3)
        #caculate new TBa with the equation
        # C02/(1/(A*T*exp(-EDividesR*T)+dp/(ShD???))*Qf = ??lamta/dp*(T-eT)+em*delta*(T**4-eT**4)+C02/
        def func(x):
            result = C02*Qf/beta/(1/(A*x*math.exp(-EDividesR/x))+dp/(Sh*D))-Nu*lamta/dp*(x-eT)-em*delta*(x**4-eT**4)-C02*Cp*(x-eT)/(1/(A*x*math.exp(-EDividesR/x))+dp/(Sh*D))
            #result = x**2-3*x+2
            return result
        T = fsolve(func,2000)
        TBa = (T+eT)/2.0
    return T
print (findT(298,2.0/1000,1500,0.9))
